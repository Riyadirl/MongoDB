//view all data

db.employee.find({}) 
//or
db.employee.aggregate([])


//insertOne
db.getCollection("employee").insertOne(
{
   " name" : "riyad",
   " id" : 123,
    "class": 12,
    "city": "Dhaka",
   " salary ": 12345
}
)

//insert many
db.getCollection("employee").insertMany(
[
 {
    name: 'Riyad',
    id: 123,
    class: 12,
    city: 'Dhaka',
    salary: 12345
  },
  {
    name: 'Alice',
    id: 124,
    class: 10,
    city: 'New York',
    salary: 15000
  }
];
)

//find
db.employee.find({}).count('total')// count total number of data

//aggregate (count)
db.employee.aggregate(
[
  {$count : 'total'}
])

//aggregate sorting
db.employee.aggregate(
[
  {$sort:{salary:1}}//assending
  {$sort:{salary:-1}}// desending
])

//aggregate limit
db.employee.aggregate(
[
{$limit:2}
])


//aggregate limit 1st and last

db.employee.aggregate(
[// top 5 salary
{$sort:{salary:-1}},
{$limit:5} 

// last 5 salary
{$sort:{salary:1}},
{$limit:5}
])


//select by match / condition 
db.employee.aggregate(
[
{$match:{salary:{$gt:10000}}},  //gater than 10000
{$match:{salary:{$gte:10000}}}, //gater than or equal 10000
{$match:{salary:{$lt:10000}}},  //less than 10000
{$match:{salary:{$lte:10000}}}, //less than or equal 10000
{$match:{salary:{$ne:10000}}}  //not equal 10000
])

//select by match / condition with and or
db.employee.aggregate(
[
    //gater than 10000 and less than 20000
{$match:{$and:[
  {salary:{$gt:10000}},
  {salary:{$lt:20000}}]
  }},

{$match:{$or:[{salary:{$gt:10000}},{salary:{$lt:20000}}]}}  //gater than 10000 or less than 20000
]) 



// like matching
db.employee.aggregate(
[
{$match:{name:/^R/}} //start with R
{$match:{name:/Riyad/}} //contain Riyad
{$match:{name:/R$/}} //end with R
{$match:{name:/^Riyad$/}} //exact match Riyad
{$match:{name:/^Riyad$/i}} //Case-Insensitive Matching
{$match:{$text:{$search:"Riyad"}}} //Full-Text Search
])


//match in
db.employee.aggregate(
[
{$match:{name:{$in:["Riyad","Alice","Bob"]}}}
])

//projection
db.employee.aggregate(
[
  {$project:{name:1,salary:1, _id:0}}// 1 means true
]
)

//skip and limit
db.employee.aggregate(
[
  {$skip:0},//no skip no limit

  {$skip:3}, //skip first 2 data
  {$limit:2} //next 2 data after skip 3 
]
)

//group by
db.employee.aggregate(
[
  {$group:{_id:"$designation"}}   // group by unique
]
)

//group by sum
db.employee.aggregate(
[
  {$group:{_id:"$designation", total:{$sum:"$salary"}}} // group by unique and sum
]
)

//group by avg
db.employee.aggregate(
[
  {$group:{_id:"$designation", avg:{$avg:"$salary"}}} // group by unique and avg
])

//Group By Max Min
db.employee.aggregate(
[
  {$group:{_id:"$designation", max:{$max:"$salary"}, min:{$min:"$salary"}}} 
])

//without group by sum avg max min
db.employee.aggregate(
[
  {$group:{_id:0, max:{$max:"$salary"}, min:{$min:"$salary"}}} //max min
  {$group:{_id:0, avg:{$avg:"$salary"}}} //avg
  {$group:{_id:0, total:{$sum:"$salary"}}} //sum
])

//group by multiple
db.employee.aggregate(
[
  {$group:
  {_id:{designation:"$designation", city:"$city"}, 
  total:{$sum:"$salary"}, //sum
  avg:{$avg:"$salary"}, //avg
  max:{$max:"$salary"},//max
  min:{$min:"$salary"}//min
  }
  }
])


//JOIN


//join by lookup operator
bd.brands.aggregate(
[
  {$lookup:
    {
      from:"categories",
      localField:"category_id",
      foreignField:"category_id",
      as:"category_details"
    }
},
//join with product table
  {$lookup:
    {
      from:"products",
      localField:"product_id",
      foreignField:"product_id",
      as:"product_details"
    }
}
])

// facet operator
db.employee.aggregate(
[
  {$facet:
    {
      "total": [{$count:"total"}],//count total
      "data": [{$skip:0},{$limit:2}],//skip 0 and limit 2
      samsung: [{$match:{company:"samsung"}}]//match samsung
    }
  }
])

// projection after join
bd.brands.aggregate(
[
{$lookup:{from:"categories",localField:"category_id",foreignField:"category_id",as:"category_details"}},
{$lookup: {from:"products",localField:"product_id",foreignField:"product_id", as:"product_details"}}

$project:{
  _id:0,
  categoryId:1, //category table
  BrandId:1,//
  ProductName: "$name",
  price: {toDouble:"$price"},
  unit:1,
  details:1,
}
])


//Add New Field With Result
db.employee.aggregate(
[
 {match: {$designation:"Manager"}},
 {$addFields: {newField:"$salary"
])

//arithmetic aggregation operators
%abs >> absolute value
%add >> addition
%ceil >> ceiling
%divide >> division
%exp >> exponential
%floor >> floor
%ln >> natural log
%log >> log

//Arithmetic Aggregation Operators
db.employee.aggregate(
[
  {$match:{unit:"lt"}},
  {$addFields:{newPrice:{$add:["$price",10]}}},
  {$addFields:{newPrice:{$multiply:["$price",10]}}},
  {$addFields:{newPrice:{$divide:["$price",10]}}},
  {$addFields:{newPrice:{$mod:["$price",10]}}},
  {$addFields:{newPrice:{$pow:["$price",10]}}},
])

//string aggregation operators
%concat >> concatenates strings and returns the concatenated string
%indexOfBytes >> returns the byte position of a substring within a string
split >> divides a string into an array of substrings based on a delimiter
toLower >> converts a string to lowercase
toUpper >> converts a string to uppercase
%substr >> returns a substring of a string, starting at a specified index position and including the specified number of characters
%substrBytes >> returns a substring of a string, starting at a specified byte index position and including the specified number of bytes
%substrCP >> returns a substring of a string, starting at a specified code point index position and including the specified number of code points
%trim >> removes whitespace or the specified characters from the beginning or end of a string\
%ltrim >> removes whitespace or the specified characters from the beginning of a string
%rtrim >> removes whitespace or the specified characters from the end of a string
%strcasecmp >> performs case-insensitive string comparison and returns: 0 if two strings are equivalent, 1 if the first string is greater than the second, and -1 if the first string is less than the second
%strLenBytes >> returns the number of bytes in a given string
%strLenCP >> returns the number of UTF-8 code points in a given string
%substr >> returns a substring of a string, starting at a specified index position and including the specified number of characters
%substrBytes >> returns a substring of a string, starting at a specified byte index position and including the specified number of bytes
%substrCP >> returns a substring of a string, starting at a specified code point index position and including the specified number of code points


//string aggregation operators
//with string
{$match:{unit:"lt"}},
  {$addFields:{newField:{$concat:["f","g","k"]}}},
  //all
  {$addFields:{newField:{$concat:["$name","$city","$salary"]}}},
  //with variable
  {$addFields:{newField:{$concat:["$name"," ","$city"," ","$salary"]}}},
  //with variable and string
  {$addFields:{newField:{$concat:["$name"," ","$city"," ","$salary"," ","$unit"]}}},
  //with variable and string and number
  {$addFields:{newField:{$concat:["$name"," ","$city"," ","$salary"," ","$unit"," ","$price"]}}},
  //with variable and string and number and math
  {$addFields:{newField:{$concat:["$name"," ","$city"," ","$salary"," ","$unit"," ","$price"," ","$price"]}}},


  //split
  {$addFields:{newField:{$split:["$name"," "]}}},
//toLower
  {$addFields:{newField:{$toLower:"$name"}}},
//toUpper
  {$addFields:{newField:{$toUpper:"$name"}}},
//substr
  {$addFields:{newField:{$substr:["$name",0,3]}}},
//substrBytes
  {$addFields:{newField:{$substrBytes:["$name",0,3]}}},
//substrCP
  {$addFields:{newField:{$substrCP:["$name",0,3]}}},



// date aggregation operators
dayOfYear >> returns the day of the year for a date as a number between 1 and 366
dayOfMonth >> returns the day of the month for a date as a number between 1 and 31
dayOfWeek >> returns the day of the week for a date as a number between 1 (Sunday) and 7 (Saturday)
year >> returns the year portion of a date
month >> returns the month for a date as a number between 1 (January) and 12 (December)
week >> returns the week of the year for a date as a number between 0 and 53
hour >> returns the hour portion of a date as a number between 0 and 23
minute >> returns the minute portion of a date as a number between 0 and 59
second >> returns the second portion of a date as a number between 0 and 59
millisecond >> returns the millisecond portion of a date as a number between 0 and 999
dateToString >> converts a date object to a string according to a user-specified format


//date aggregation operators
db.employee.aggregate(
[
  {$match:{unit:"lt"}},
  {$addFields:{newField: "$CreateDate"}},
  {$addFields:{newField:{$dayOfYear:"$CreateDate"}}},
  {$addFields:{newField:{$dayOfMonth:"$CreateDate"}}},
  {$addFields:{newField:{$dayOfWeek:"$CreateDate"}}},
  {$addFields:{newField:{$year:"$CreateDate"}}},
  {$addFields:{newField:{$month:"$CreateDate"}}},
  {$addFields:{newField:{$week:"$CreateDate"}}},
  {$addFields:{newField:{$hour:"$CreateDate"}}},
  {$addFields:{newField:{$minute:"$CreateDate"}}},
  {$addFields:{newField:{$second:"$CreateDate"}}},
  {$addFields:{newField:{$millisecond:"$CreateDate"}}},
  {$addFields:{newField:{$dateToString:{format:"%Y-%m-%d",date:"$CreateDate"}}}},
  {$addFields:{newField:{$dateToString:{format:"%Y-%m-%d %H:%M:%S",date:"$CreateDate"}}}},
  {$addFields:{newField:{$dateToString:{format:"%Y-%m-%d %H:%M:%S:%L",date:"$CreateDate"}}}},
])


//comparison aggregation operators
%cmp >> compares two values and returns:
%0 if the two values are equivalent
%-1 if the first value is less than the second
%1 if the first value is greater than the second
%eq >> compares two values and returns:
%true if the values are equivalent
%false if the values are not equivalent
%gt >> compares two values and returns:
%true if the first value is greater than the second
%false if the first value is less than or equivalent to the second
%gte >> compares two values and returns:
%true if the first value is greater than or equivalent to the second
%lt >> compares two values and returns:


//comparison aggregation operators
db.employee.aggregate(
[
 {$addFields:{newField:{$cmp:["$salary",10000]}}}, //compare
 {$addFields:{newField:{$eq:["$salary",10000]}}}, //eq
 {$addFields:{newField:{$gt:["$salary",10000]}}}, //gt
 {$addFields:{newField:{$gte:["$salary",10000]}}}, //gte
 {$addFields:{newField:{$lt:["$salary",10000]}}}, //lt
 {$addFields:{newField:{$lte:["$salary",10000]}}}, //lte
 {$addFields:{newField:{$ne:["$salary",10000]}}}, //ne
])


//boolean aggregation operators
%and >> returns true only when all its expressions evaluate to true. Accepts any number of argument expressions.
%or >> returns true when any of its expressions evaluates to true. Accepts any number of argument expressions.
%not >> returns the boolean value that is the opposite of its argument expression. Accepts a single argument expression.


//boolean aggregation operators
db.employee.aggregate(
[
 {$addFields:{newField:
  {$and:[
    {$gt:["$salary",10000]},
    {$eq:["$city","Dhaka"]},
    {$eq:["$unit","lt"]}
  ]}
  }}
])



//conditional aggregation operators
%cond >> evaluates a boolean expression to return one of the two specified return expressions.

//conditional aggregation operators
db.employee.aggregate(
[
 {$addFields:{newField:
  {$cond:{
    if:{$gt:["$salary",10000]},
    then:"High",
    else:"Low"
  }}
  ////
  }},
  {$addFields:{newField:
  {$cond:{
    if:{$gt:["$salary",10000]},
    then:"High",
    else:{$cond:{
      if:{$gt:["$salary",5000]},
      then:"Medium",
      else:"Low"
    }}
  }}
  }}
])


// $switch >> evaluates a series of case expressions. When it finds an expression which evaluates to true, $switch executes a specified expression and breaks out of the control flow.
//conditional aggregation operators
db.employee.aggregate(
[
 {$addFields:{newField:
  {$switch:{
    branches:[
      {case:{$gt:["$salary",10000]},then:"High"},
      {case:{$gt:["$salary",5000]},then:"Medium"},
      {case:{$gt:["$salary",1000]},then:"Low"},
    ],
    default:"Very Low"
  }}
  }}
])